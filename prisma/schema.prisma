// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model CapsuleProposalRequirement {
  id                           String                        @id @default(cuid())
  deadline                     DateTime                     
  title                        String
  description                  String?
  research_id                  String                        
  created_at                   DateTime?                     @default(now())
  updated_at                   DateTime?                     @updatedAt
  urc_funded_research          URCFundedResearch         @relation(fields: [research_id], references: [id], onUpdate: Restrict)
  capsule_proposal_submission  CapsuleProposalSubmission?
}

model CapsuleProposalSubmission {
  id                            String                        @id @default(cuid())
  requirement_id                String                        @unique 
  created_at                    DateTime?                     @default(now())
  updated_at                    DateTime?                     @updatedAt
  title                         String
  research_thrust               String
  brief_background              String
  objectives_of_the_study       String
  significance_of_the_study     String
  methodology                   String
  capsule_proposal_requirement  CapsuleProposalRequirement @relation(fields: [requirement_id], references: [id], onUpdate: Restrict)
}

model Comment {
  id                        String                  @id @default(cuid())
  parent_comment_id         String?                 
  deliverable_submission_id String                  
  content                   String
  user_id                   String
  created_at                DateTime                @default(now())
  updated_at                DateTime                @updatedAt
  deliverable_submission    DeliverableSubmission @relation(fields: [deliverable_submission_id], references: [id], onUpdate: Restrict)
  comment                   Comment?               @relation("commentsTocomments_parent_comment_id", fields: [parent_comment_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  user                      User                   @relation(fields: [user_id], references: [id], onUpdate: Restrict)
  other_comments            Comment[]              @relation("commentsTocomments_parent_comment_id")
}

model DeliverableSubmission {
  id             String       @id @default(cuid())
  deliverable_id String       
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  title          String
  description    String?
  deliverable    Deliverable @relation(fields: [deliverable_id], references: [id], onUpdate: Restrict)
  comments       Comment[]
}

model Deliverable {
  id                      String                    @id @default(cuid())
  deadline                DateTime                 
  title                   String
  description             String?
  created_at              DateTime                  @default(now())
  updated_at              DateTime                  @updatedAt
  research_id             String                    
  urc_funded_research     URCFundedResearch     @relation(fields: [research_id], references: [id], onUpdate: Restrict)
  deliverable_submissions DeliverableSubmission[]
}

model Download {
  id           String       @id @default(cuid())
  title        String
  description  String?
  user_id      String
  upload_id    String       
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  file_upload  FileUpload @relation(fields: [upload_id], references: [id], onUpdate: Restrict)
  users        User        @relation(fields: [user_id], references: [id], onUpdate: Restrict)
}

model ExternalResearch {
  id                             String                           @id @default(cuid())
  title                          String                           @unique
  organization                   String?
  main_proponents                String?
  co_proponents                  String?
  duration                       String?
  cycle                          String?
  budget                         Float?
  upload_id                      String?                          
  created_at                     DateTime                         @default(now())
  updated_at                     DateTime                         @updatedAt
  research_status_id             String                           @default("not_implemented")
  slug                           String?
  verified                       Boolean                          @default(false)
  research_status                ResearchStatus                @relation(fields: [research_status_id], references: [id], onUpdate: Restrict)
  file_upload                    FileUpload?                    @relation(fields: [upload_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  research_presentations         ResearchPresentation[]
  journal_publications           JournalPublication[]
  bridge_users   UserToExternalResearchBridge[]
  bridge_disseminations ExternalResearchToDisseminationBridge[]
}

model FileUpload {
  id                              String                            @unique @default(cuid())
  google_id                       String                            @unique
  name                            String
  file_type                       String
  mime_type                       String
  created_at                      DateTime                          @default(now())
  updated_at                      DateTime                          @updatedAt
  resource_key                    String?
  user_id                         String
  public_access                   Boolean                           @default(false)
  user                            User                             @relation(fields: [user_id], references: [id], onUpdate: Restrict)
  downloads                       Download[]
  external_researches             ExternalResearch[]
  full_blown_proposal_submissions FullBlownProposalSubmission[]
  institute_news                  InstituteNews[]
  research_event_attendances      ResearchEventAttendance[]
  journal_publications            JournalPublication[]
  book_publications               BookPublication[]

  @@id([id, google_id])
}

model FullBlownProposalRequirement {
  id                              String                           @id @default(cuid())
  deadline                        DateTime                        
  title                           String
  description                     String?
  research_id                     String                           
  created_at                      DateTime?                        @default(now())
  updated_at                      DateTime?                        @updatedAt
  urc_funded_research             URCFundedResearch            @relation(fields: [research_id], references: [id], onUpdate: Restrict)
  full_blown_proposal_submission  FullBlownProposalSubmission?
}

model FullBlownProposalSubmission {
  id                               String                           @id @default(cuid())
  requirement_id                   String                           @unique 
  title                            String
  description                      String?
  created_at                       DateTime?                        @default(now())
  updated_at                       DateTime?                        @updatedAt
  upload_id                        String                           
  full_blown_proposal_requirement  FullBlownProposalRequirement @relation(fields: [requirement_id], references: [id], onUpdate: Restrict)
  file_upload                      FileUpload                     @relation(fields: [upload_id], references: [id], onUpdate: Restrict)
}

model InstituteNews {
  id           String        @id @default(cuid())
  title        String        @unique
  content      String
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  institute_id String?        
  user_id      String?
  upload_id    String?       
  institute    Institute?   @relation(fields: [institute_id], references: [id], onUpdate: Restrict)
  file_upload  FileUpload? @relation(fields: [upload_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  user         User?       @relation(fields: [user_id], references: [id], onUpdate: Restrict)
}

model Institute {
  id                  String                @id(map: "institute_pkey") @default(cuid())
  name                String                @unique
  short_name          String?
  contact_number      String?
  email               String?
  description         String?
  address             String?
  research_areas      String?
  logo_url            String?
  created_at          DateTime?             @default(now())
  updated_at          DateTime?             @updatedAt
  institute_news      InstituteNews[]
  bridge_users InstituteToUserBridge[]
}

model InstituteToUserBridge {
  user_id      String
  institute_id String     
  role_title   String
  duration     String?
  created_at   DateTime?  @default(now())
  updated_at   DateTime?  @updatedAt
  institute    Institute @relation(fields: [institute_id], references: [id], onUpdate: Restrict)
  user         User      @relation(fields: [user_id], references: [id], onUpdate: Restrict)

  @@id([user_id, institute_id])
}

model ResearchEventAttendance {
  id              String       @id @default(cuid())
  verified        Boolean      @default(false)
  user_id         String
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  event_name      String
  start_date      DateTime    
  end_date        DateTime    
  description     String
  proof_upload_id String       
  proof_upload    FileUpload @relation(fields: [proof_upload_id], references: [id], onUpdate: Restrict)
  user            User        @relation(fields: [user_id], references: [id], onUpdate: Restrict)
}

model ResearchPresentation {
  id                     String                 @id @default(cuid())
  is_external_research   Boolean                @default(false)
  urc_funded_research_id String?                
  external_research_id   String?                
  event_title            String                 @unique
  location               String
  event_date             String?             
  created_at             DateTime               @default(now())
  updated_at             DateTime               @updatedAt
  verified               Boolean                @default(false)
  presentor              String?
  conference             String?
  budget                 Float?
  url                    String?
  external_research      ExternalResearch?   @relation(fields: [external_research_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  urc_funded_research    URCFundedResearch? @relation(fields: [urc_funded_research_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  bridge_users   UserToResearchPresentationBridge[]
  bridge_units ResearchPresentationToUnitBridge[]
}

model UserToResearchPresentationBridge {
  user_id String
  research_presentation_id String

  user User @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  research_presentation ResearchPresentation @relation(fields: [research_presentation_id], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@id([user_id, research_presentation_id])
}

model ResearchDissemination {
  id                     String                 @id @default(cuid())
  is_external_research   Boolean                @default(false)
  urc_funded_research_id String?                
  external_research_id   String?                
  title                  String                 @unique
  location               String?
  organization           String?
  event_date             String?
  created_at             DateTime               @default(now())
  updated_at             DateTime               @updatedAt
  verified               Boolean                @default(false)
  url                    String?
  bridge_users   UserToResearchDisseminationBridge[]
  bridge_external_researches  ExternalResearchToDisseminationBridge[]
  bridge_urc_funded_researches  URCFundedResearchToDisseminationBridge[]
  bridge_units ResearchDisseminationToUnitBridge[]
}

model UserToResearchDisseminationBridge {
  user_id String
  research_dissemination_id String

  user User @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  research_dissemination ResearchDissemination @relation(fields: [research_dissemination_id], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@id([user_id, research_dissemination_id])
}

model ExternalResearchToDisseminationBridge {        
  external_research_id   String
  research_dissemination_id String

  external_research ExternalResearch? @relation(fields: [external_research_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  research_dissemination ResearchDissemination @relation(fields: [research_dissemination_id], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@id([research_dissemination_id, external_research_id])
}

model URCFundedResearchToDisseminationBridge {
  urc_funded_research_id String
  research_dissemination_id String

  urc_funded_research URCFundedResearch? @relation(fields: [urc_funded_research_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  research_dissemination ResearchDissemination @relation(fields: [research_dissemination_id], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@id([research_dissemination_id, urc_funded_research_id])
}

model JournalPublication {
  id                     String                 @id @default(cuid())
  is_external_research   Boolean                @default(false)
  urc_funded_research_id String?                
  external_research_id   String?                
  created_at             DateTime               @default(now())
  proof_upload_id        String?                 
  verified               Boolean                @default(false)
  updated_at             DateTime               @updatedAt
  date_published         DateTime?             
  title                  String                 @unique
  authors                String?
  issn                   String?
  journal                String?
  url                    String?
  slug                   String?
  is_indexed             Boolean                @default(false)
  external_researches    ExternalResearch?   @relation(fields: [external_research_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  proof_upload           FileUpload?           @relation(fields: [proof_upload_id], references: [id], onUpdate: Restrict)
  urc_funded_researches  URCFundedResearch? @relation(fields: [urc_funded_research_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  bridge_users   UserToJournalPublicationBridge[]
  bridge_units JournalPublicationToUnitBridge[]
}

model UserToJournalPublicationBridge {
  user_id String
  journal_publication_id String

  user User @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  journal_publication JournalPublication @relation(fields: [journal_publication_id], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@id([user_id, journal_publication_id])
}

model BookPublication {
  id                     String                 @id @default(cuid())
  created_at             DateTime               @default(now())
  proof_upload_id        String?                 
  verified               Boolean                @default(false)
  updated_at             DateTime               @updatedAt
  title                  String                 @unique
  authors                String?
  publisher              String?
  isbn                   String?
  slug                   String?
  date_published         DateTime?             
  proof_upload           FileUpload?           @relation(fields: [proof_upload_id], references: [id], onUpdate: Restrict)
  bridge_users   UserToBookPublicationBridge[]
  bridge_units BookPublicationToUnitBridge[]
}

model UserToBookPublicationBridge {
  user_id String
  book_publication_id String

  user User @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  book_publication BookPublication @relation(fields: [book_publication_id], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@id([user_id, book_publication_id])
}

model JournalPublicationToUnitBridge {
  unit_id String
  journal_publication_id String

  unit Unit @relation(fields: [unit_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  journal_publication JournalPublication @relation(fields: [journal_publication_id], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@id([unit_id, journal_publication_id])
}

model BookPublicationToUnitBridge {
  unit_id String
  book_publication_id String

  unit Unit @relation(fields: [unit_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  book_publication BookPublication @relation(fields: [book_publication_id], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@id([unit_id, book_publication_id])
}

model ResearchStatus {
  id                    String                  @id
  comment               String?
  external_researches   ExternalResearch[]
  urc_funded_researches URCFundedResearch[]
}

model RevisionRequirement {
  id                    String                @id(map: "revision_requirement_pkey") @default(cuid())
  deadline              DateTime             
  research_id           String                
  title                 String
  description           String?
  created_at            DateTime?             @default(now())
  updated_at            DateTime?             @updatedAt
  urc_funded_researches URCFundedResearch @relation(fields: [research_id], references: [id], onUpdate: Restrict, map: "revision_requirement_research_id_fkey")
  revision_submissions  RevisionSubmission?
}

model RevisionSubmission {
  id                    String                @id(map: "revision_submission_pkey") @default(cuid())
  requirement_id        String                @unique(map: "revision_submission_requirement_id_key") 
  title                 String
  description           String?
  created_at            DateTime?             @default(now())
  updated_at            DateTime?             @updatedAt
  revision_requirements RevisionRequirement @relation(fields: [requirement_id], references: [id], onUpdate: Restrict, map: "revision_submission_requirement_id_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Unit {
  id             String    @id @default(cuid())
  parent_unit_id String?   
  name           String    @unique
  description    String?
  created_at     DateTime? @default(now())
  updated_at     DateTime? @updatedAt
  parent_unit    Unit?    @relation("unitsTounits_parent_unit_id", fields: [parent_unit_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  sub_units      Unit[]   @relation("unitsTounits_parent_unit_id")
  users          User[]
  bridge_urc_funded_researches URCFundedResearchToUnitBridge[]
  bridge_journal_publications JournalPublicationToUnitBridge[]
  bridge_book_publications BookPublicationToUnitBridge[]
  bridge_research_presentations ResearchPresentationToUnitBridge[]
  bridge_research_disseminations ResearchDisseminationToUnitBridge[]
}

model ResearchPresentationToUnitBridge {
  unit_id String
  research_presentation_id String

  unit Unit @relation(fields: [unit_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  research_presentation ResearchPresentation @relation(fields: [research_presentation_id], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@id([unit_id, research_presentation_id])
}

model ResearchDisseminationToUnitBridge {
  unit_id String
  research_dissemination_id String

  unit Unit @relation(fields: [unit_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  research_dissemination ResearchDissemination @relation(fields: [research_dissemination_id], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@id([unit_id, research_dissemination_id])
}

model URCFundedResearchToUnitBridge {
  unit_id String
  urc_funded_research_id String

  unit Unit @relation(fields: [unit_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  urc_funded_research URCFundedResearch @relation(fields: [urc_funded_research_id], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@id([unit_id, urc_funded_research_id])
}

model URCFundedResearch {
  id                               String                             @id @default(cuid())
  title                            String                             @unique
  main_proponents                  String?
  co_proponents                    String?
  duration                         String?
  cycle                            String?
  budget                           Float?
  source_of_fund                   String?
  approved                         Boolean                            @default(false)
  created_at                       DateTime?                          @default(now())
  updated_at                       DateTime?                          @updatedAt
  research_status_id               String                             @default("not_implemented")
  research_status                  ResearchStatus                  @relation(fields: [research_status_id], references: [id], onUpdate: Restrict)
  slug                             String?
  capsule_proposal_requirements    CapsuleProposalRequirement[]
  deliverables                     Deliverable[]
  full_blown_proposal_requirements FullBlownProposalRequirement[]
  research_presentations           ResearchPresentation[]
  bridge_disseminations  URCFundedResearchToDisseminationBridge[]
  journal_publications             JournalPublication[]
  revision_requirements            RevisionRequirement[]
  bridge_users   UserToURCFundedResearchBridge[]
  bridge_units      URCFundedResearchToUnitBridge[]
}

model UserRole {
  id             String           @id @default("default")
  comment        String?
  bridge_users UserToRoleBridge[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  first_name    String?
  middle_initial String?
  last_name     String?
  honorific     String?
  titles        String?

  created_at                     DateTime                         @default(now())
  updated_at                     DateTime                         @updatedAt
  unit_id                        String?                          
  units                          Unit?                           @relation(fields: [unit_id], references: [id], onDelete: Restrict, onUpdate: Restrict)

  accounts                       Account[]
  comments                       Comment[]
  downloads                      Download[]
  file_uploads                   FileUpload[]
  institute_news                 InstituteNews[]
  research_event_attendances     ResearchEventAttendance[]
  sessions                       Session[]

  bridge_institutes            InstituteToUserBridge[]
  bridge_book_publications              UserToBookPublicationBridge[]
  bridge_research_presentations         UserToResearchPresentationBridge[]
  bridge_research_disseminations        UserToResearchDisseminationBridge[]
  bridge_journal_publications           UserToJournalPublicationBridge[]
  bridge_external_researches   UserToExternalResearchBridge[]
  bridge_roles                 UserToRoleBridge[]
  bridge_urc_funded_researches UserToURCFundedResearchBridge[]
}

model UserToExternalResearchBridge {
  external_research_id String              
  role_title           String
  created_at           DateTime?           @default(now())
  updated_at           DateTime?           @updatedAt
  user_id              String
  external_research    ExternalResearch @relation(fields: [external_research_id], references: [id], onUpdate: Restrict)
  user                 User               @relation(fields: [user_id], references: [id], onUpdate: Restrict)

  @@id([external_research_id, user_id])
}

model UserToRoleBridge {
  role_id    String     @default("default")
  user_id    String
  user_role  UserRole   @relation(fields: [role_id], references: [id], onUpdate: Restrict)
  user       User       @relation(fields: [user_id], references: [id], onUpdate: Restrict)

  @@id([role_id, user_id])
}

model UserToURCFundedResearchBridge {
  urc_funded_research_id String                
  role_title             String
  created_at             DateTime?             @default(now())
  updated_at             DateTime?             @updatedAt
  admin_positions        String?
  user_id                String
  urc_funded_research    URCFundedResearch    @relation(fields: [urc_funded_research_id], references: [id], onUpdate: Restrict, map: "user_to_research_research_id_fkey")
  user                   User                 @relation(fields: [user_id], references: [id], onUpdate: Restrict)

  @@id([urc_funded_research_id, user_id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
