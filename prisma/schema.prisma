// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Action {
  id                     String        @id @default(cuid())

  title                  String

  url                    String?
  action_tags            ActionTag[]

  profile_id                String
  timestamp              DateTime      @default(now())

  acted_profiles            Profile[]        @relation("acted_users")
  affected_profile          Profile          @relation(fields: [profile_id], references: [id], onDelete: NoAction)
}

model ActionTag {
  id                     String        @id
  content                String?
  color                  String?

  actions                Action[]
}

model Audit {
  id            String        @id @default(cuid())
  
  table_name    String
  action        String
  args          String

  timestamp     DateTime      @default(now())
}

model Submission {
  id                            String                        @id @default(cuid()) 
                   
  created_at                    DateTime?                     @default(now())
  updated_at                    DateTime?                     @updatedAt
//title                         String
  description                   String?

  type                          SubmissionTypes
  status                        SubmissionStatus              @default(NOT_PROCESSED)

  capsule_proposal_submission       CapsuleProposalSubmission?
  full_blown_proposal_submission    FullBlownProposalSubmission?
  deliverable_submission            DeliverableSubmission? 
  budget_proposal_submission        BudgetProposalSubmission?

  project_id                    String       
  project                       Project                          @relation(fields: [project_id], references: [id], onDelete: Cascade)

  processed_by_id               String?
  processed_by                  Profile?                         @relation("processed_by_relation", fields: [processed_by_id], references: [id], onDelete: SetNull)

  profile_id                       String
  profile                          Profile                          @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  files                             FileUpload[]
  comments                          Comment[]
}

model ProjectToInstituteBridge {
  project_id   String
  institute_id String

  created_at   DateTime?  @default(now())
  updated_at   DateTime?  @updatedAt

  verified               Boolean                      @default(false)
  verification_requests  VerificationRequest[]

  institute    Institute    @relation(fields: [institute_id], references: [id], onDelete: Cascade)
  project      Project      @relation(fields: [project_id], references: [id], onDelete: Cascade)

  @@id([project_id, institute_id])
}


model VerificationRequest {
  id                            String                        @id @default(cuid()) 
                   
  created_at                    DateTime?                     @default(now())
  updated_at                    DateTime?                     @updatedAt

  description                   String?
  role                          String?

  proof_uploads                 FileUpload[]

  type                          VerificationTypes
  status                        VerificationStatus              @default(NOT_VERIFIED)

  verified_by_id                String?
  verified_by                   Profile?                      @relation("verification_user_verified_by", fields: [verified_by_id], references: [id], onDelete: Cascade)

  external_research_id          String?
  external_research             ExternalResearch?             @relation(fields: [external_research_id], references: [id], onDelete: SetNull)

  journal_publication_id        String?
  journal_publication           JournalPublication?           @relation(fields: [journal_publication_id], references: [id], onDelete: SetNull)

  book_publication_id           String?
  book_publication              BookPublication?              @relation(fields: [book_publication_id], references: [id], onDelete: SetNull)

  research_dissemination_id     String?
  research_dissemination        ResearchDissemination?        @relation(fields: [research_dissemination_id], references: [id], onDelete: SetNull)

  research_presentation_id      String?
  research_presentation         ResearchPresentation?         @relation(fields: [research_presentation_id], references: [id], onDelete: SetNull)

  research_event_id             String?
  research_event                ResearchEvent?      @relation(fields: [research_event_id], references: [id], onDelete: SetNull)

  project_institute_project_id    String?
  project_institute_institute_id  String?
  project_institute             ProjectToInstituteBridge?   @relation(fields: [project_institute_project_id, project_institute_institute_id], references: [project_id, institute_id], onDelete: SetNull)

  institute_news_id             String?
  institute_news                InstituteNews?      @relation(fields: [institute_news_id], references: [id], onDelete: SetNull)

  profile_id                    String?
  profile                       Profile?                          @relation(fields: [profile_id], references: [id], onDelete: Cascade)
}

enum VerificationTypes {
  EXTERNAL_RESEARCH
  JOURNAL_PUBLICATION
  BOOK_PUBLICATION
  RESEARCH_DISSEMINATION
  RESEARCH_PRESENTATION
  RESEARCH_EVENT
  INSTITUTE_NEWS
  PROJECT_INSTITUTE
}

enum VerificationStatus {
  VERIFIED
  NOT_VERIFIED
  INVALID
}

enum SubmissionStatus {
  APPROVED
  NOT_APPROVED
  NOT_PROCESSED
}

enum SubmissionTypes {
  CAPSULE
  FULL
  BUDGET
  DELIVERABLE
}

model CapsuleProposalSubmission {
  id                            String                        @id @default(cuid())
  created_at                    DateTime?                     @default(now())
  updated_at                    DateTime?                     @updatedAt
  
  research_thrust_id            String?
  research_thrust               ResearchThrust?                @relation(fields: [research_thrust_id], references: [id], onDelete: SetNull)

  brief_background              String
  objectives_of_the_study       String
  significance_of_the_study     String
  methodology                   String

  tentative_schedule            String
  tentative_budget              Float
  
  submission_id                 String                         @unique
  submission                    Submission                     @relation(fields: [submission_id], references: [id], onDelete: Cascade)
}

model UniversityMission {
  id                            String                        @id @default(cuid())
  created_at                    DateTime?                     @default(now())
  updated_at                    DateTime?                     @updatedAt

  description                   String

  research_thrusts              ResearchThrust[]
}

model ResearchThrust {
  id                            String                        @id @default(cuid())
  created_at                    DateTime?                     @default(now())
  updated_at                    DateTime?                     @updatedAt

  description                   String

  capsule_proposal_submissions  CapsuleProposalSubmission[]

  university_mission_id         String?
  university_mission            UniversityMission?             @relation(fields: [university_mission_id], references: [id], onDelete: SetNull)
}

model Comment {
  id                        String                  @id @default(cuid())
  parent_comment_id         String?                 
                    
  content                   String
  profile_id                   String
  created_at                DateTime                @default(now())
  updated_at                DateTime                @updatedAt

  submission_id                    String
  submission                       Submission                        @relation(fields: [submission_id], references: [id], onDelete: Cascade)

  parent_comment            Comment?               @relation("commentsTocomments_parent_comment_id", fields: [parent_comment_id], references: [id], onDelete: Cascade)
  profile                   Profile                   @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  other_comments            Comment[]              @relation("commentsTocomments_parent_comment_id")
}

model DeliverableSubmission {
  id             String       @id @default(cuid())
  deliverable_id String       
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt

  description    String?
  
  deliverable    Deliverable @relation(fields: [deliverable_id], references: [id], onDelete: Cascade)

  submission_id                    String                            @unique
  submission                       Submission                        @relation(fields: [submission_id], references: [id], onDelete: Cascade)
}

model BudgetProposalSubmission {
  id             String       @id @default(cuid())
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
                  
  submission_id                    String                            @unique
  submission                       Submission                        @relation(fields: [submission_id], references: [id], onDelete: Cascade)
}

model Deliverable {
  id                      String                    @id @default(cuid())
  deadline                DateTime                 
  title                   String
  description             String?
  done                    Boolean                   @default(false)
  created_at              DateTime                  @default(now())
  updated_at              DateTime                  @updatedAt
  project_id              String                    
  project     Project     @relation(fields: [project_id], references: [id], onDelete: Cascade)
  deliverable_submissions DeliverableSubmission[]
}

model Download {
  id           String       @id @default(cuid())
  title        String
  description  String?
  profile_id   String
  upload_id    String       
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt

  category_id  String       @unique
  category     DownloadCategory @relation(fields: [category_id], references: [id], onDelete: SetNull)

  file_upload  FileUpload @relation(fields: [upload_id], references: [id], onDelete: SetNull)
  profile      Profile        @relation(fields: [profile_id], references: [id], onDelete: SetNull)
}

model DownloadCategory {
  id           String       @id @default(cuid())
  title        String
  description  String?

  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt

  downloads    Download[]
}

model ExternalResearch {
  id                             String                           @id @default(cuid())
  title                          String                           @unique
  organization                   String?
  duration_start                 DateTime?
  duration_end                   DateTime?
  cycle                          String?
  budget                         Float?
  upload_id                      String?                          
  created_at                     DateTime                         @default(now())
  updated_at                     DateTime                         @updatedAt
  project_status_id             String                           @default("not_implemented")
  slug                           String?

  project_status                ProjectStatus?                @relation(fields: [project_status_id], references: [id], onDelete: SetNull)
  file_uploads                  FileUpload[]
  research_presentations         ResearchPresentation[]
  journal_publications           JournalPublication[]
  bridge_profiles               ProfileToExternalResearchBridge[]
  disseminations                ResearchDissemination[]

  verified                       Boolean                      @default(false)
  verification_requests          VerificationRequest[]
}

model FileUpload {
  id                              String                            @id @default(cuid())
  name                            String
  file_type                       String
  mime_type                       String
  size                            Int                               @default(0)
  created_at                      DateTime                          @default(now())
  updated_at                      DateTime                          @updatedAt
  profile_id                         String?
  public_access                   Boolean                           @default(false)
  profile                         Profile?                             @relation("upload_to_owner", fields: [profile_id], references: [id], onDelete: SetNull)
  
  projects                        Project[]
  downloads                       Download[]
  external_researches             ExternalResearch[]
  institute_news                  InstituteNews[]
  research_events                 ResearchEvent[]
  journal_publications            JournalPublication[]
  book_publications               BookPublication[]
  submissions                     Submission[]
  institute_logos                 Institute[]
  profile_photos                  Profile[]
  research_presentations          ResearchPresentation[]
  research_disseminations         ResearchDissemination[]
  verification_requests           VerificationRequest[]
}

model FullBlownProposalSubmission {
  id                               String                           @id @default(cuid())
  description                      String?
  created_at                       DateTime?                        @default(now())
  updated_at                       DateTime?                        @updatedAt
  submission_id                    String                           @unique
  submission                       Submission                        @relation(fields: [submission_id], references: [id], onDelete: Cascade)
}

model InstituteNews {
  id           String        @id @default(cuid())
  title        String        @unique
  slug         String?       @unique
  content      String
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  institute_id String?        
  profile_id      String?
  upload_id    String?       
  institute    Institute?   @relation(fields: [institute_id], references: [id], onDelete: SetNull)
  uploads      FileUpload[]
  profile      Profile?       @relation(fields: [profile_id], references: [id], onDelete: SetNull)
  
  verified     Boolean        @default(false)
  verification_requests VerificationRequest[]
}

model Institute {
  id                  String                @id(map: "institute_pkey") @default(cuid())
  name                String                @unique
  short_name          String?               @unique
  contact_number      String?
  email               String?
  description         String?
  address             String?
  research_areas      ResearchArea[]
  photo_id            String?
  photo               FileUpload?  @relation(fields: [photo_id], references: [id], onDelete: SetNull)
  created_at          DateTime?             @default(now())
  updated_at          DateTime?             @updatedAt

  institute_news      InstituteNews[]
  bridge_projects ProjectToInstituteBridge[]
  bridge_profiles ProfileToInstituteBridge[]
}

model ProfileToInstituteBridge {
  profile_id         String
  institute_id       String     
  role_title         String

  is_head       Boolean  @default(false)

  start_date   DateTime?  @default(now())
  end_date     DateTime?

  created_at   DateTime?  @default(now())
  updated_at   DateTime?  @updatedAt
  institute    Institute @relation(fields: [institute_id], references: [id], onDelete: Cascade)
  profile      Profile      @relation(fields: [profile_id], references: [id], onDelete: Cascade)

  @@id([profile_id, institute_id])
}

model ResearchEvent {
  id              String       @id @default(cuid())

  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  event_name      String       @unique
  start_date      String    
  end_date        String    
  description     String?
  file_uploads                  FileUpload[]

  bridge_profiles               ProfileToResearchEventBridge[]

  verified                       Boolean                      @default(false)
  verification_requests          VerificationRequest[]
}

model ProfileToResearchEventBridge {
  profile_id String
  research_event_id String
  role_title String

  created_at           DateTime?           @default(now())
  updated_at           DateTime?           @updatedAt

  profile Profile @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  research_event ResearchEvent @relation(fields: [research_event_id], references: [id], onDelete: Cascade)

  @@id([profile_id, research_event_id])
}

model ResearchPresentation {
  id                     String                 @id @default(cuid())
  is_external_research   Boolean                @default(false)
  project_id String?                
  external_research_id   String?                
  title                  String                 @unique
  location               String
  event_date             String?             
  created_at             DateTime               @default(now())
  updated_at             DateTime               @updatedAt
  presentors             String[]
  conference             String?
  budget                 Float?
  url                    String?
  slug                   String?                @unique

  file_uploads           FileUpload[]

  external_research      ExternalResearch?   @relation(fields: [external_research_id], references: [id], onDelete: SetNull)
  project    Project? @relation(fields: [project_id], references: [id], onDelete: SetNull)
  bridge_profiles   ProfileToResearchPresentationBridge[]
  units Unit[]

  verified                       Boolean                      @default(false)
  verification_requests          VerificationRequest[]
}

model ProfileToResearchPresentationBridge {
  profile_id String
  research_presentation_id String
  role_title String

  created_at           DateTime?           @default(now())
  updated_at           DateTime?           @updatedAt

  profile Profile @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  research_presentation ResearchPresentation @relation(fields: [research_presentation_id], references: [id], onDelete: Cascade)

  @@id([profile_id, research_presentation_id])
}

model ResearchDissemination {
  id                     String                 @id @default(cuid())
  is_external_research   Boolean                @default(false)
  project_id String?                
  external_research_id   String?                
  title                  String                 @unique
  location               String?
  organization           String?
  event_date             String?
  slug                   String?                @unique
  created_at             DateTime               @default(now())
  updated_at             DateTime               @updatedAt
  url                    String?

  file_uploads           FileUpload[]

  bridge_profiles   ProfileToResearchDisseminationBridge[]
  external_researches  ExternalResearch[]
  projects  Project[]
  units Unit[]

  verified                       Boolean                      @default(false)
  verification_requests          VerificationRequest[]
}

model ProfileToResearchDisseminationBridge {
  profile_id String
  research_dissemination_id String
  role_title String?

  created_at           DateTime?           @default(now())
  updated_at           DateTime?           @updatedAt

  profile Profile @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  research_dissemination ResearchDissemination @relation(fields: [research_dissemination_id], references: [id], onDelete: Cascade)

  @@id([profile_id, research_dissemination_id])
}

model JournalPublication {
  id                     String                 @id @default(cuid())
  is_external_research   Boolean                @default(false)
  project_id String?                
  external_research_id   String?                
  created_at             DateTime               @default(now())
  updated_at             DateTime               @updatedAt
  date_published         DateTime?             
  title                  String                 @unique
  authors                String[]
  issn                   String?
  journal                String?
  url                    String?
  slug                   String?                @unique
  is_indexed             Boolean                @default(false)
  external_researches    ExternalResearch?   @relation(fields: [external_research_id], references: [id], onDelete: SetNull)
  
  file_uploads           FileUpload[]
  
  projects  Project? @relation(fields: [project_id], references: [id], onDelete: SetNull)
  bridge_profiles   ProfileToJournalPublicationBridge[]
  units Unit[]

  verified                       Boolean                      @default(false)
  verification_requests          VerificationRequest[]
}

model ProfileToJournalPublicationBridge {
  profile_id String
  role_title String?
  created_at           DateTime?           @default(now())
  updated_at           DateTime?           @updatedAt

  journal_publication_id String

  profile Profile @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  journal_publication JournalPublication @relation(fields: [journal_publication_id], references: [id], onDelete: Cascade)

  @@id([profile_id, journal_publication_id])
}

model BookPublication {
  id                     String                 @id @default(cuid())
  created_at             DateTime               @default(now())
  updated_at             DateTime               @updatedAt
  title                  String                 @unique
  authors                String[]
  publisher              String?
  isbn                   String?
  slug                   String?                @unique
  date_published         String?
  bridge_profiles   ProfileToBookPublicationBridge[]

  file_uploads                  FileUpload[]

  units Unit[]

  verified                       Boolean                      @default(false)
  verification_requests          VerificationRequest[]
}

model ProfileToBookPublicationBridge {
  profile_id String
  role_title String?
  created_at           DateTime?           @default(now())
  updated_at           DateTime?           @updatedAt

  book_publication_id String

  profile Profile @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  book_publication BookPublication @relation(fields: [book_publication_id], references: [id], onDelete: Cascade)

  @@id([profile_id, book_publication_id])
}

model ProjectStatus {
  id                    String                  @id
  comment               String?
  external_researches   ExternalResearch[]
  projects Project[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Deadline {
  id                    String                  @id @default(cuid())
  title                 String
  description           String?
  date                  DateTime

  created_at            DateTime?             @default(now())
  updated_at            DateTime?             @updatedAt

  projects              Project[]

  academic_term_id      String?
  academic_term         AcademicTerm?     @relation(fields: [academic_term_id], references: [id], onDelete: Cascade)
}

model AcademicTerm {
  id                    String                  @id @default(cuid())
  title                 String
  description           String?
  is_current            Boolean               @default(false)

  projects              Project[]
  deadlines             Deadline[]

  start_date            DateTime
  end_date              DateTime
}

model Unit {
  id             String    @id @default(cuid())
  parent_unit_id String?   
  name           String    @unique
  description    String?
  created_at     DateTime? @default(now())
  updated_at     DateTime? @updatedAt
  parent_unit    Unit?    @relation("unitsTounits_parent_unit_id", fields: [parent_unit_id], references: [id], onDelete: Cascade)
  sub_units      Unit[]   @relation("unitsTounits_parent_unit_id")
  profiles       Profile[]
  projects Project[]
  journal_publications JournalPublication[]
  book_publications BookPublication[]
  research_presentations ResearchPresentation[]
  research_disseminations ResearchDissemination[]
}

model Project {
  id                               String                             @id @default(cuid())
  title                            String                             @unique

  research_areas                   ResearchArea[]

  keywords                         String[]
  abstract                         String?
  duration_start                   DateTime?
  duration_end                     DateTime?
  cycle                            String?
  budget                           Float?
  source_of_fund                   String?
  approved                         Boolean?                           
  created_at                       DateTime?                          @default(now())
  updated_at                       DateTime?                          @updatedAt
  completed_at                     String?
  project_status_id                String                             @default("not_implemented")
  project_status                   ProjectStatus?                     @relation(fields: [project_status_id], references: [id], onDelete: SetNull)
  slug                             String?                            @unique

  academic_term_id                 String?
  academic_term                    AcademicTerm?     @relation(fields: [academic_term_id], references: [id], onDelete: SetNull)

  related_files                    FileUpload[]
  submissions                      Submission[]
  deliverables                     Deliverable[]
  research_presentations           ResearchPresentation[]
  disseminations                   ResearchDissemination[]
  journal_publications             JournalPublication[]
  bridge_profiles                  ProfileToProjectBridge[]
  bridge_institutes                ProjectToInstituteBridge[]
  units                            Unit[]
  deadlines                        Deadline[]
}

model ResearchArea {
  id                               String                             @id @default(cuid())
  
  field                            String                             @unique

  profiles                         Profile[]
  projects                         Project[]
  institutes                       Institute[]
}

model UserRole {
  id             String           @id @default("default")
  comment        String?
  profiles       Profile[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  first_name    String?
  last_name     String?

  created_at                     DateTime                         @default(now())
  updated_at                     DateTime                         @updatedAt      
  
  accounts                       Account[]
  sessions                       Session[]

  profile_id                     String?      @unique
  profile                        Profile?     @relation(fields: [profile_id], references: [id], onDelete: SetNull)
}

model Profile {
  id            String    @id @default(cuid())
  email         String    @unique
  photo_id      String?
  photo         FileUpload?  @relation(fields: [photo_id], references: [id], onDelete: SetNull)

  first_name      String?
  middle_initial  String?
  last_name       String?
  honorific       String?
  titles          String?

  user                           User?
  created_at                     DateTime                         @default(now())
  updated_at                     DateTime                         @updatedAt                     
  units                          Unit[]
  roles                          UserRole[]

  research_areas                 ResearchArea[]

  actions_made                   Action[]     @relation("acted_users")
  actions_involved               Action[]

  verified_requests              VerificationRequest[] @relation("verification_user_verified_by")
  processed_submissions          Submission[] @relation("processed_by_relation")

  comments                       Comment[]
  downloads                      Download[]
  submissions                    Submission[]
  file_uploads                   FileUpload[]  @relation("upload_to_owner")
  institute_news                 InstituteNews[]

  verification_requests          VerificationRequest[]

  bridge_institutes                     ProfileToInstituteBridge[]
  bridge_book_publications              ProfileToBookPublicationBridge[]
  bridge_research_presentations         ProfileToResearchPresentationBridge[]
  bridge_research_disseminations        ProfileToResearchDisseminationBridge[]
  bridge_journal_publications           ProfileToJournalPublicationBridge[]
  bridge_external_researches            ProfileToExternalResearchBridge[]
  bridge_projects                       ProfileToProjectBridge[]
  bridge_research_events                ProfileToResearchEventBridge[]
}

model ProfileToExternalResearchBridge {
  external_research_id String              
  role_title           String
  created_at           DateTime?           @default(now())
  updated_at           DateTime?           @updatedAt
  profile_id           String
  external_research    ExternalResearch   @relation(fields: [external_research_id], references: [id], onDelete: Cascade)
  profile              Profile               @relation(fields: [profile_id], references: [id], onDelete: Cascade)

  @@id([external_research_id, profile_id])
}

model ProfileToProjectBridge {
  project_id String                
  role_title             String
  created_at             DateTime?             @default(now())
  updated_at             DateTime?             @updatedAt
  admin_positions        String?
  profile_id             String
  project    Project    @relation(fields: [project_id], references: [id], map: "user_to_research_research_id_fkey", onDelete: Cascade)
  profile                Profile                 @relation(fields: [profile_id], references: [id], onDelete: Cascade)

  @@id([project_id, profile_id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
